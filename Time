Help on class HashTable in module hash_table:

class HHaasshhTTaabbllee(builtins.object)
 |  HashTable(table_size)
 |  
 |  A hash table data structure that implements an associative list, a.k.a. a dictionary, which is an abstract data type
 |  that maps keys to values.
 |  
 |  Time Complexity: O(n) - Creating the empty list/array of size n.
 |  
 |  Attributes:
 |      hash_table(list): A list that will be used as a bucket.
 |      table_size(int): The size of the hash table.
 |  
 |  Methods defined here:
 |  
 |  ____iinniitt____(self, table_size)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  aadddd__ppaacckkaaggee(self, key, value)
 |      This method is used to add values to the hash table.
 |      
 |      Time Complexity: O(1)
 |      
 |      Parameters:
 |          key(int): The value that is used as the bucket where the data will be stored.
 |          value(list): The value to be stored in the bucket.
 |      
 |      Returns: None
 |  
 |  ccrreeaattee__kkeeyy(self, key)
 |      This method is a hash function used to compute an index, into a list of buckets.
 |      
 |      Time Complexity: O(1)
 |      
 |      Parameters:
 |          key(int): The value that is used as the bucket where the data will be stored.
 |      
 |      Returns: None
 |  
 |  llooookkuupp__iitteemm(self, key)
 |      This method is used to look up/view an item that has been added to the hash table.
 |      
 |      Time Complexity: O(1)
 |      
 |      Parameters:
 |          key(int): The value that is used as the bucket where the data will be stored.
 |      
 |      Returns:
 |          list: The value that is stored in the bucket.
 |  
 |  uuppddaattee__iitteemm(self, key, value_index, new_value)
 |      This method is used to update a value that has already been added to the hash table.
 |      
 |      Time Complexity: O(1)
 |      
 |      Parameters:
 |          key(int): The value that is used as the bucket where the data will be stored.
 |          value_index(int): The index of the stored list where the update will happen.
 |          new_value(any): The updated value.
 |      
 |      Returns: None
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  ____ddiicctt____
 |      dictionary for instance variables (if defined)
 |  
 |  ____wweeaakkrreeff____
 |      list of weak references to the object (if defined)
